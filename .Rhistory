map_df = melt_df %>% filter(gender == 'female', age > 17, age < 25, hour > 1, hour <5, dayofweek == 'Friday', time == 'start')
leaflet(data = map_df) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~name, label = ~name, icon = bike_icon) %>% addProviderTiles('Thunderforest.Transport')
map_df = melt_df %>% filter(gender == 'female', age > 17, age < 25, hour > 1, hour <5, dayofweek == 'Friday', time == 'start')
leaflet(data = map_df) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~name, label = ~name, icon = bike_icon) %>% addProviderTiles('OpenStreetMap.Mapnik')
map_df = melt_df %>% filter(gender == 'female', age > 17, age < 25, hour > 1, hour <5, dayofweek == 'Friday', time == 'start')
leaflet(data = map_df) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~name, label = ~name, icon = bike_icon)
map_df = melt_df %>% filter(gender == 'female', age > 17, age < 25, hour > 1, hour <5, dayofweek == 'Friday', time == 'start')
leaflet(data = map_df) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~name, label = ~name, icon = bike_icon) %>% addProviderTiles('OpenStreetMap.Mapnik')
map_df = melt_df %>% filter(gender == 'female', age > 17, age < 25, hour > 1, hour <5, dayofweek == 'Friday', time == 'start')
leaflet(data = map_df) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~name, label = ~name, icon = bike_icon) %>% addProviderTiles('OpenStreetMap.BlackAndWhite')
map_df = melt_df %>% filter(gender == 'female', age > 17, age < 25, hour > 1, hour <5, dayofweek == 'Friday', time == 'start')
leaflet(data = map_df) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~name, label = ~name %>% addProviderTiles('OpenStreetMap.BlackAndWhite')
map_df = melt_df %>% filter(gender == 'female', age > 17, age < 25, hour > 1, hour <5, dayofweek == 'Friday', time == 'start')
leaflet(data = map_df) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~name, label = ~name) %>% addProviderTiles('OpenStreetMap.BlackAndWhite')
map_df = melt_df %>% filter(gender == 'female', age > 17, age < 25, hour > 1, hour <5, dayofweek == 'Friday', time == 'start')
leaflet(data = map_df) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~name, label = ~name) %>% addProviderTiles('OpenStreetMap.BlackAndWhite')
map_df = melt_df %>% filter(gender == 'female', age > 17, age < 25, hour > 1, hour <5, dayofweek == 'Friday', time == 'start')
leaflet(data = map_df) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~name, label = ~name, icon = bike_icon)
map_df = melt_df %>% filter(gender == 'female', age > 17, age < 25, hour > 1, hour <5, dayofweek == 'Friday', time == 'start')
leaflet(data = map_df) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~name, label = ~name, icon = bike_icon)
bike_icon = makeIcon('bikeiconbw.png', iconWidth = 25, iconHeight = 38)
leaflet(data = map_df) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~name, label = ~name, icon = bike_icon)
bike_icon = makeIcon('bikeiconbw.png', iconWidth = 25, iconHeight = 38)
leaflet(data = map_df) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~name, label = ~name, icon = bike_icon)
map_df = melt_df %>% filter(gender == 'female', age > 17, age < 25, hour > 1, hour <5, dayofweek == 'Friday', time == 'start')
leaflet(data = map_df) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~name, label = ~name, icon = bike_icon)
melt_df %>% filter(gender == 'female', age > 17, age < 25, hour > 1, hour <5, dayofweek == 'Friday', time == 'start') %>% group_by(gender, age, dayofweek, time) %>% summarise(n())
melt_df %>% filter(gender == 'female', age > 17, age < 25, hour > 14, hour <20, dayofweek == 'Friday', time == 'start') %>% group_by(gender, age, dayofweek, time) %>% summarise(n())
melt_df %>% filter(gender == 'female', age > 17, age < 25, hour > 14, hour <20, dayofweek == 'Friday', time == 'start') %>% group_by(gender, age, dayofweek, time, latitude, longitude) %>% summarise(n())
bike_icon = makeIcon('www/bikeicon.png', iconWidth = 25, iconHeight = 38)
leaflet(data = map_df) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~name, label = ~name, icon = bike_icon)
bike_icon = makeIcon('www/bikeiconbw.png', iconWidth = 25, iconHeight = 38)
leaflet(data = map_df) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~name, label = ~name, icon = bike_icon)
would have liked to add the estimated count and color icons accordingly
bike_icon = makeIcon('www/bikeiconbw.png', iconWidth = 25, iconHeight = 38)
leaflet(data = map_df) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~name, label = ~name, icon = bike_icon)
map_df = melt_df %>% filter(gender == 'female', age > 17, age < 25, hour > 1, hour <5, dayofweek == 'Friday', time == 'start')
leaflet(data = map_df) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~name, label = ~name) %>% addProviderTiles('Esri.NatGeoWorldMap')
leaflet(data = map_df) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~name, label = ~name) %>% addProviderTiles('Esri.NatGeoWorldMap')
bike_icon = makeIcon('www/bikeiconbw.png', iconWidth = 25, iconHeight = 38)
leaflet(data = map_df) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~name, label = ~name, icon = bike_icon) %>% addProviderTiles('Esri.NatGeoWorldMap')
library(ggmap)
x <- gGeoCode("Vancouver, BC")
way1txt <- "645 East Hastings Street, Vancouver, BC"
way2txt <- "2095 Commercial Drive, Vancouver, BC"
route_df <- route(way1txt, way2txt, structure = 'route')
dist<-sum(route_df[,1],na.rm=T) # total distance in meters
#
qmap(c(x[2],x[1]), zoom = 12) +
library(ggmap)
x <- gGeoCode("Vancouver, BC")
way1txt <- "645 East Hastings Street, Vancouver, BC"
way2txt <- "2095 Commercial Drive, Vancouver, BC"
route_df <- route(way1txt, way2txt, structure = 'route')
dist<-sum(route_df[,1],na.rm=T) # total distance in meters
#
qmap(c(x[2],x[1]), zoom = 12) +
geom_path(aes(x = lon, y = lat),  colour = 'red', size = 1.5, data = route_df, lineend = 'round')
x <- gGeoCode("Vancouver, BC")
way1txt <- "645 East Hastings Street, Vancouver, BC"
way2txt <- "2095 Commercial Drive, Vancouver, BC"
route_df <- route(way1txt, way2txt, structure = 'route')
dist<-sum(route_df[,1],na.rm=T) # total distance in meters
#
qmap(c(x[2],x[1]), zoom = 12) +
geom_path(aes(x = lon, y = lat),  colour = 'red', size = 1.5, data = route_df, lineend = 'round')
library(devtools)
install_github("ramnathv/rCharts@dev")
install_github("ramnathv/rMaps")
x <- gGeoCode("Vancouver, BC")
way1txt <- "645 East Hastings Street, Vancouver, BC"
way2txt <- "2095 Commercial Drive, Vancouver, BC"
route_df <- route(way1txt, way2txt, structure = 'route')
dist<-sum(route_df[,1],na.rm=T) # total distance in meters
#
qmap(c(x[2],x[1]), zoom = 12) +
geom_path(aes(x = lon, y = lat),  colour = 'red', size = 1.5, data = route_df, lineend = 'round')
construct.geocode.url <- function(address, return.call = "json", sensor = "false") {
root <- "http://maps.google.com/maps/api/geocode/"
u <- paste(root, return.call, "?address=", address, "&sensor=", sensor, sep = "")
return(URLencode(u))
}
gGeoCode <- function(address,verbose=FALSE) {
if(verbose) cat(address,"\n")
u <- construct.geocode.url(address)
doc <- getURL(u)
x <- fromJSON(doc)
if(x$status=="OK") {
lat <- x$results[[1]]$geometry$location$lat
lng <- x$results[[1]]$geometry$location$lng
return(c(lat, lng))
} else {
return(c(NA,NA))
}
}
x <- gGeoCode("Vancouver, BC")
way1txt <- "645 East Hastings Street, Vancouver, BC"
way2txt <- "2095 Commercial Drive, Vancouver, BC"
route_df <- route(way1txt, way2txt, structure = 'route')
dist<-sum(route_df[,1],na.rm=T) # total distance in meters
#
qmap(c(x[2],x[1]), zoom = 12) +
geom_path(aes(x = lon, y = lat),  colour = 'red', size = 1.5, data = route_df, lineend = 'round')
qmap(c(x[2],x[1]), zoom = 12) +
geom_path(aes(x = lon, y = lat),  colour = 'red', size = 1.5, data = route_df, lineend = 'round')
head(df2)
from <- df2[1:50, start.station.name]
to <- df2[1:50, end.station.name]
from <- df2[1:50, 'start.station.name']
to <- df2[1:50, 'end.station.name']
mapdist(from, to)
from <- df2[1:2, 'start.station.name']
to <- df2[1:2, 'end.station.name']
mapdist(from, to)
from <- df2[1:2, c('start.station.longitude', 'start.station.latitude')]
to <- df2[1:2, c('end.station.longitude', 'end.station.latitude')]
mapdist(from, to)
from <- df2[1:50, 'start.station.name']
to <- df2[1:50, 'end.station.name']
from <- df2[1:50, 'start.station.name']
to <- df2[1:50, 'end.station.name']
mapdist(from, to)
from <- df2[1:5, 'start.station.name']
to <- df2[1:5, 'end.station.name']
mapdist(from, to)
subset_df2 = filterdf_2[1:5]
subset_df2 = filter(df_2[1:5])
subset_df2 = filter(df2[1:5])
subset_df2
subset_df2 = df2[1:5, c("start.station.name", 'end.station.name')]
subset_df2
paste(subset_df2$start.station.name, 'New York')
subset_df2$start.station.name = paste(subset_df2$start.station.name, 'New York')
subset_df2$end.station.name = paste(subset_df2$start.station.name, 'New York')
from <- subset_df2$start.station.name
to <- subset_df2$end.station.name
mapdist(from, to)
head(df2)
subset_df2$start.station.name = paste(subset_df2$start.station.name, 'New York')
subset_df2$end.station.name = paste(subset_df2$end.station.name, 'New York')
from <- subset_df2$start.station.name
to <- subset_df2$end.station.name
mapdist(from, to)
subset_df2 = filter(df2[1:10])
subset_df2$start.station.name = paste(subset_df2$start.station.name, 'New York')
subset_df2$end.station.name = paste(subset_df2$end.station.name, 'New York')
from <- subset_df2$start.station.name
to <- subset_df2$end.station.name
mapdist(from, to)
subset_df2 = filter(df2[1:5])
subset_df2
head(df2)
subset_df2 = df2[1:5, c(start.station.name,end.station.name, starthour, tripduration.min, dayofweek)
)
subset_df2 = df2[1:5, c(start.station.name,end.station.name, starthour, tripduration.min, dayofweek)]
subset_df2 = df2[1:5, c('start.station.name','end.station.name', 'starthour', 'tripduration.min', 'dayofweek')]
head(subset_df2)
subset_df2 = df2[1:5, c('start.station.name','end.station.name', 'starthour', 'tripduration.min', 'dayofweek')]
subset_df2$start.station.name = paste(subset_df2$start.station.name, 'New York')
subset_df2$end.station.name = paste(subset_df2$end.station.name, 'New York')
from <- subset_df2$start.station.name
to <- subset_df2$end.station.name
mapdist(from, to)
head(df2)
subset_df2 = df2[1:5,]
head(subset_df2)
subset_df2$g = c('start.station.latitude', 'start.station.longitude ')
subset_df2 = df2[1:5, ]
subset_df2$start.lat_long = paste('(', subset_df2$start.latitude, ',', subset_df2$start.latitude, ')')
subset_df2
apply(subset_df2, 1,
function(x) paste(start.station.latitude, start.station.longitude, sep=", ")
)
apply(subset_df2, 1,
function(x) paste(subset_df2$start.station.latitude, subset_df2$start.station.longitude, sep=", "))
coords <- data.frame(id = subset_df2$tripduration,
coords = apply(subset_df2, 1,
function(x) paste(subset_df2$start.station.latitude, subset_df2$start.station.longitude, sep=", ")))
coords
?ddply
ddply(subset_df2, subset_df2$tripduration, function(x) paste(subset_df2$start.station.latitude, subset_df2$start.station.longitude, sep=", ")
)
x = ddply(subset_df2, subset_df2$tripduration, function(x) paste(subset_df2$start.station.latitude, subset_df2$start.station.longitude, sep=", "))
View(x)
apply(subset_df2, 2,
function(x) paste(subset_df2$start.station.latitude, subset_df2$start.station.longitude, sep=", "))
apply(subset_df2$start.lat_long, 2,
function(x) paste(subset_df2$start.station.latitude, subset_df2$start.station.longitude, sep=", "))
subset_df2$start.lat_long = apply(subset_df2$start.latitude 2,
+       function(x) paste(subset_df2$start.station.latitude, subset_df2$start.station.longitude, sep=", "))
subset_df2$start.lat_long = apply(subset_df2$start.latitude,2,
+       function(x) paste(subset_df2$start.station.latitude, subset_df2$start.station.longitude, sep=", "))
apply(subset_df2, 1,
function(x) paste(subset_df2$start.station.latitude, subset_df2$start.station.longitude, sep=", "))
apply(subset_df2, 2,
function(x) paste(subset_df2$start.station.latitude, subset_df2$start.station.longitude, sep=", "))
ddply(subset_df2, ~ tripduration, summarize,
function(x) paste(subset_df2$start.station.latitude, subset_df2$start.station.longitude, sep=", "))
ddply(subset_df2, ~ tripduration, summarize,
lat_long = function(x) paste(subset_df2$start.station.latitude, subset_df2$start.station.longitude, sep=", "))
subset_df2$start.lat_long <- apply( subset_df2[ , c(start.station.latitude, start.station.longitude) ] , 1 , paste , collapse = "," )
subset_df2$start.lat_long <- apply( subset_df2[ , c('start.station.latitude', 'start.station.longitude') ] , 1 , paste , collapse = "," )
head(subset_df2)
subset_df2$start.lat_long <- apply( subset_df2[ , c('start.station.latitude', 'start.station.longitude') ] , 1 , paste , collapse = "," )
subset_df2$end.lat_long <- apply( subset_df2[ , c('end.station.latitude', 'end.station.longitude') ] , 1 , paste , collapse = "," )
subset_df2
subset_df2$start.lat_long <- apply( subset_df2[ , c('start.station.latitude', 'start.station.longitude') ] , 1 , paste , collapse = "," )
subset_df2$end.lat_long <- apply( subset_df2[ , c('end.station.latitude', 'end.station.longitude') ] , 1 , paste , collapse = "," )
from <- subset_df2$start.lat_long
to <- subset_df2$end.lat_long
mapdist(from, to)
?sub
a = 40.74144387,-73.97536082
a ="40.74144387,-73.97536082"
"(", format(A),")"
a=paste0("(", format(unlist(a)),")")
a
subset_df2$start.lat_long=paste0("(", format(unlist(subset_df2$start.lat_long)),")")
head(subset_df2)
subset_df2$start.lat_long=paste0("(", format(unlist(subset_df2$start.lat_long)),")")
subset_df2$start.lat_long <- apply( subset_df2[ , c('start.station.latitude', 'start.station.longitude') ] , 1 , paste , collapse = "," )
subset_df2$end.lat_long <- apply( subset_df2[ , c('end.station.latitude', 'end.station.longitude') ] , 1 , paste , collapse = "," )
subset_df2$start.lat_long=paste0("(", format(unlist(subset_df2$start.lat_long)),")")
subset_df2$end.lat_long=paste0("(", format(unlist(subset_df2$end.lat_long)),")")
from <- subset_df2$start.lat_long
to <- subset_df2$end.lat_long
mapdist(from, to)
subset_df2$end.lat_long=paste0("(", format(unlist(subset_df2$end.lat_long)),")")
head(subset_df2)
subset_df2 = df2[1:5, c('start.station.name','end.station.name', 'starthour', 'tripduration.min', 'dayofweek')]
subset_df2$start.lat_long <- apply( subset_df2[ , c('start.station.latitude', 'start.station.longitude') ] , 1 , paste , collapse = "," )
subset_df2$end.lat_long <- apply( subset_df2[ , c('end.station.latitude', 'end.station.longitude') ] , 1 , paste , collapse = "," )
subset_df2$start.lat_long=paste0("(", format(unlist(subset_df2$start.lat_long)),")")
subset_df2$end.lat_long=paste0("(", format(unlist(subset_df2$end.lat_long)),")")
head(subset_df2)
subset_df2 = df2[1:5, c('start.station.name','end.station.name', 'starthour', 'tripduration.min', 'dayofweek', 'start.station.latitude', 'start.station.longitude')]
subset_df2$start.lat_long <- apply( subset_df2[ , c('start.station.latitude', 'start.station.longitude') ] , 1 , paste , collapse = "," )
subset_df2$end.lat_long <- apply( subset_df2[ , c('end.station.latitude', 'end.station.longitude') ] , 1 , paste , collapse = "," )
subset_df2$start.lat_long=paste0("(", format(unlist(subset_df2$start.lat_long)),")")
subset_df2$end.lat_long=paste0("(", format(unlist(subset_df2$end.lat_long)),")")
subset_df2 = df2[1:5, c('start.station.name','end.station.name',
'starthour', 'tripduration.min', 'dayofweek',
'start.station.latitude', 'start.station.longitude'
'end.station.latitude', 'end.station.longitude')]
subset_df2$start.lat_long <- apply( subset_df2[ , c('start.station.latitude', 'start.station.longitude') ] , 1 , paste , collapse = "," )
subset_df2$end.lat_long <- apply( subset_df2[ , c('end.station.latitude', 'end.station.longitude') ] , 1 , paste , collapse = "," )
subset_df2$start.lat_long=paste0("(", format(unlist(subset_df2$start.lat_long)),")")
subset_df2$end.lat_long=paste0("(", format(unlist(subset_df2$end.lat_long)),")")
head(df2)
subset_df2 = df2[1:5, c('start.station.name','end.station.name',
'starthour', 'tripduration.min', 'dayofweek',
'start.station.latitude', 'start.station.longitude',
'end.station.latitude', 'end.station.longitude')]
subset_df2$start.lat_long <- apply( subset_df2[ , c('start.station.latitude', 'start.station.longitude') ] , 1 , paste , collapse = "," )
subset_df2$end.lat_long <- apply( subset_df2[ , c('end.station.latitude', 'end.station.longitude') ] , 1 , paste , collapse = "," )
subset_df2$start.lat_long=paste0("(", format(unlist(subset_df2$start.lat_long)),")")
subset_df2$end.lat_long=paste0("(", format(unlist(subset_df2$end.lat_long)),")")
head(subset_df2)
from <- subset_df2$start.lat_long
to <- subset_df2$end.lat_long
mapdist(from, to)
rbind.fill(apply(subset(subset_df2, select=c("start.lat_long", "end.lat_long")), 1, function(x) mapdist(x[1], x[2], mode="cycling")))
rbind.fill(apply(subset(subset_df2, select=c("start.lat_long", "end.lat_long")), 1, function(x) mapdist(x[1], x[2], mode="bicycling")))
subset_df2 = df2[1:5, c('start.station.name','end.station.name',
'starthour', 'tripduration.min', 'dayofweek',
'start.station.latitude', 'start.station.longitude',
'end.station.latitude', 'end.station.longitude')]
subset_df2$start.lat_long <- apply( subset_df2[ , c('start.station.latitude', 'start.station.longitude') ] , 1 , paste , collapse = ", " )
subset_df2$end.lat_long <- apply( subset_df2[ , c('end.station.latitude', 'end.station.longitude') ] , 1 , paste , collapse = ", " )
subset_df2$start.lat_long=paste0("(", format(unlist(subset_df2$start.lat_long)),")")
subset_df2$end.lat_long=paste0("(", format(unlist(subset_df2$end.lat_long)),")")
from <- subset_df2$start.lat_long
to <- subset_df2$end.lat_long
mapdist(from, to)
rbind.fill(apply(subset(subset_df2, select=c("start.lat_long", "end.lat_long")), 1, function(x) mapdist(x[1], x[2], mode="bicycling")))
subset_df2 = df2[1:5, c('start.station.name','end.station.name',
'starthour', 'tripduration.min', 'dayofweek',
'start.station.latitude', 'start.station.longitude',
'end.station.latitude', 'end.station.longitude')]
class(subset_df2$end.station.latitude)
samp <- coords[sample(nrow(coords), 200), ]
samp_o <- samp[1:100,] # we're splitting one sample in two here
samp_d <- samp[101:200, ]
data.frame(id = subset_df2@data$lat_long,
coords = apply(subset_df2@coords, 1,
function(x) paste('start.station.latitude', 'start.station.longitude', sep=", ")))
?data.frame
data.frame(id = lat_long,
coords = apply(subset_df2, 1,
function(x) paste('start.station.latitude', 'start.station.longitude', sep=", ")))
data.frame(id = 'lat_long',
coords = apply(subset_df2, 1,
function(x) paste('start.station.latitude', 'start.station.longitude', sep=", ")))
data.frame(id = 'lat_long',
coords = apply(subset_df2, 1,
function(x) paste(subset_df2$start.station.latitude, subset_df2$start.station.longitude, sep=", ")))
subset_df2$start.lat_long <- apply( subset_df2[ , c('start.station.latitude', 'start.station.longitude') ] , 1 , paste , collapse = ", " )
subset_df2$end.lat_long <- apply( subset_df2[ , c('end.station.latitude', 'end.station.longitude') ] , 1 , paste , collapse = ", " )
from <- subset_df2$start.lat_long
to <- subset_df2$end.lat_long
mapdist(from, to)
?mapdist
from <- subset_df2$start.lat_long
to <- subset_df2$end.lat_long
mapdist(from, to, mode='bicycling')
from <- subset_df2$start.lat_long
to <- subset_df2$end.lat_long
mapdist(from, to, mode='bicycling', output='simple')
install.packages('googleway')
library(googleway)
## using a valid Google Maps API key
key <- "AIzaSyB1Oq-rYunwKh-I0Cgx0z2nCy0m8T5FukA"
## Using the first and last coordinates as the origin/destination
origin <- c(17.48693, 78.38945)
destination <- c(17.47077, 78.35874)
## get the directions from Google Maps API
res <- google_directions(origin = origin,
destination = destination,
key = key)
res
df_polyline <- decode_pl(res$routes$overview_polyline$points)
leaflet() %>%
addTiles() %>%
addPolylines(data = df_polyline, lat = ~lat, lng = ~lon)
df_polyline <- decode_pl(res$routes$overview_polyline$points)
leaflet() %>%
addTiles() %>%
addPolylines(data = df_polyline, lat = ~lat, lng = ~lon) %>%
addMarkers(lat = ~lat, lng = ~lon) %>% addProviderTiles('Esri.NatGeoWorldMap')
df_polyline <- decode_pl(res$routes$overview_polyline$points)
leaflet() %>%
addTiles() %>%
addPolylines(data = df_polyline, lat = ~lat, lng = ~lon) %>% addProviderTiles('Esri.NatGeoWorldMap')
df_polyline <- decode_pl(res$routes$overview_polyline$points)
leaflet() %>%
addTiles() %>%
addPolylines(data = df_polyline, lat = ~lat, lng = ~lon)
leaflet() %>%
addTiles() %>%
addPolylines(data = df_polyline, lat = ~lat, lng = ~lon) %>%
addMarkers(~lat, ~lon)
leaflet() %>%
addTiles() %>%
addPolylines(data = df_polyline, lat = ~lat, lng = ~lon) %>%
addMarkers(~lat, ~lng)
melt_df
head(df2)
g = ggplot(tile_df, aes(x=startrange, y=dayofweek, fill=count)) +
geom_tile(color="white", size=0.1) +
scale_x_discrete(expand = c(0, 0)) +
labs(x=NULL, y=NULL, title="Citi Bike users per day and hour") +
scale_fill_gradient(low = "#deebf7", high = "#3182bd", name = "# Riders") +
theme_tufte(base_family="Helvetica") +
theme(plot.title=element_text(hjust=0)) +
theme(axis.ticks=element_blank()) +
theme(axis.text=element_text(size=7)) +
theme(legend.title=element_text(size=8)) +
theme(legend.text=element_text(size=6)) +
theme(legend.key.size=unit(0.2, "cm")) +
theme(legend.key.width=unit(1, "cm")) +
facet_wrap(~agegroup)
suppressWarnings(ggplotly(g))
leaflet(data = map_df) %>%
addTiles() %>%
bike_icon = makeIcon('www/bikeiconbw.png', iconWidth = 25, iconHeight = 38)
leaflet(data = map_df) %>%
addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~name, label = ~name, icon = bike_icon) %>% addProviderTiles('Esri.NatGeoWorldMap')
subset_df2 = df2[1:5, c('start.station.name','end.station.name',
'starthour', 'tripduration.min', 'dayofweek',
'start.station.latitude', 'start.station.longitude',
'end.station.latitude', 'end.station.longitude')]
subset_df2$start.lat_long <- apply( subset_df2[ , c('start.station.latitude', 'start.station.longitude') ] , 1 , paste , collapse = ", " )
subset_df2$end.lat_long <- apply( subset_df2[ , c('end.station.latitude', 'end.station.longitude') ] , 1 , paste , collapse = ", " )
from <- subset_df2$start.lat_long
to <- subset_df2$end.lat_long
mapdist(from, to, mode='bicycling')
head(df1)
head(df2)
str(df1)
str(df2)
library(reshape2)
library(plyr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(ggthemes)
library(leaflet)
library(shiny)
library(googleVis)
library(data.table)
library(scales)
library(plotly)
rawdf = fread(input = './DataScience/NYC_DSA/project1_citibike/www/201605-citibike-tripdata.csv')
head(rawdf)
##STEP 1- HYPOTHESIS GENERATION
## PROBLEM: balance the
## Hypotheses:
##STEP 2- DATA EXPLORATION
# 1- Identify variables' type
str(rawdf)
# 2- Find missing values in dataset
# NA values:
summary(rawdf)
# only the column birth.year and gender (expressed as 0) have missing values. These variables are relevant for the first part of our analysis but irrelevant to the second part.
# We'll remove the observations with missing values for the first part of our analysis.
# We'll keep all the observations (and ignore the missing values) in the second part of our analysis.
# the starttime and stoptime columns are treated as characters so we can't detect any potential missing values. We'll convert them.
# 3- Convert & combine/split values
# a- split date and time in the starttime and endtime columns
df = separate(rawdf, starttime, into=c("startday","starttime"), sep=" ")
df = separate(df, stoptime, into=c("stopday","stoptime"), sep=" ")
# b- convert dates to proper format
df$startday = as.Date(df$startday, format = '%m/%d/%Y')
df$stopday = as.Date(df$stopday, format = '%m/%d/%Y')
# c- check for missing values in the time and date columns
summary(df)
# there is no unusual dates.
# e- extract month and day from dates (month and day are similar for start and stop date so only grabbing the values from startday)
df$month = as.numeric(format(df$startday, format = "%m"))
df$day = as.numeric(format(df$startday, format = "%d"))
df$monthname = month.abb[df$month]
df$dayofweek = weekdays(as.Date(df$startday))
df = as.data.frame(df)
names(df)[names(df)=="start station id"] = "start.station.id"
names(df)[names(df)=="start station name"] = "start.station.name"
names(df)[names(df)=="start station latitude"] = "start.station.latitude"
names(df)[names(df)=="start station longitude"] = "start.station.longitude"
names(df)[names(df)=="end station id"] = "end.station.id"
names(df)[names(df)=="end station name"] = "end.station.name"
names(df)[names(df)=="end station latitude"] = "end.station.latitude"
names(df)[names(df)=="end station longitude"] = "end.station.longitude"
names(df)[names(df)=="birth year"] = "birth.year"
# f- convert start and stop times to proper format and group by intervals of 15 mins
df$starttime = as.POSIXlt(round(as.double(strptime(df$starttime, '%H:%M:%S'))/(15*60))*(15*60),origin=(as.POSIXlt('1970-01-01')))
df$starttime = format(df$starttime,"%H:%M")
df$stoptime = as.POSIXlt(round(as.double(strptime(df$stoptime, '%H:%M:%S'))/(15*60))*(15*60),origin=(as.POSIXlt('1970-01-01')))
df$stoptime = format(df$stoptime,"%H:%M")
# add a column where we group the start and stop time by hour
tStart = strptime(paste("2001-01-01", df$starttime), format="%Y-%m-%d %H:%M")
df$starthour = format(round(tStart, units="hours"), format="%H:%M")
tStop = strptime(paste("2001-01-01", df$stoptime), format="%Y-%m-%d %H:%M")
df$stophour = format(round(tStop, units="hours"), format="%H:%M")
# g- convert the time duration to minutes (instead of seconds) to make it more user friendly.
df$tripduration.min = round(as.numeric(df$tripduration)/60)
# h- add a column with time duration grouped by chunks of 10 min.
df$tripduration.mingroup = 10*floor((df$tripduration.min + 9)/10)
# i- convert the gender values to gender names (i.e. 1 = male, 2 = female)
df$gender = ifelse(df$gender %in% '0', NA, ifelse(df$gender %in% '1', 'male','female'))
# j- convert the birth.year to age
df$age = as.integer(format(Sys.Date(), "%Y")) - as.integer(df$birth.year)
# k- create age groups
df$agegroup = cut(df$age,
breaks = c(17, 25, 35, 45, 55, 65, 75, Inf),
labels = c("17-24", "25-34", "35-44", "45-54", "55-64", "65-74", "75 or older"),
right = FALSE)
# l- create group for start and stop hour
df$starthour = strtrim(df$starthour, 2)
df$starthour = as.numeric(df$starthour)
df$startrange = cut(df$starthour,
breaks = c(00, 04, 08, 12, 16, 20, 24),
labels = c("before 4am", "4am-8am", "8am-12pm", "12pm-4pm", "4pm-8pm", "after 8pm"),
right = FALSE)
df$stophour = strtrim(df$stophour, 2)
df$stophour = as.numeric(df$stophour)
df$stoprange = cut(df$stophour,
breaks = c(00, 04, 08, 12, 16, 20, 24),
labels = c("before 4am", "4am-8am", "8am-12pm", "12pm-4pm", "4pm-8pm", "after 8pm"),
right = FALSE)
# m - convert latitude and longitude to numeric
df$start.station.longitude = as.numeric(df$start.station.longitude)
df$end.station.longitude = as.numeric(df$end.station.longitude)
df$start.station.latitude = as.numeric(df$start.station.latitude)
df$end.station.latitude = as.numeric(df$end.station.latitude)
